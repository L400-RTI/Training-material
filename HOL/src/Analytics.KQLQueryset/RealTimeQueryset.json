{
  "queryset": {
    "version": "1.0.0",
    "dataSources": [
      {
        "id": "ea0c1b9b-759e-4224-a8e8-718dfe18b1e3",
        "clusterUri": "https://help.kusto.windows.net/",
        "type": "AzureDataExplorer",
        "databaseName": "ContosoSales"
      },
      {
        "id": "a3d394b1-ba4c-4049-b5c1-3ccc69d5e73f",
        "clusterUri": "https://help.kusto.windows.net/",
        "type": "AzureDataExplorer",
        "databaseName": "FindMyPartner"
      },
      {
        "id": "d9e6969d-a37d-4341-8e1f-cb511e9dd77f",
        "clusterUri": "https://help.kusto.windows.net/",
        "type": "AzureDataExplorer",
        "databaseName": "SampleIoTData"
      },
      {
        "id": "7e8d937e-9dd9-48e3-be83-dbeec0c5f91d",
        "clusterUri": "https://help.kusto.windows.net/",
        "type": "AzureDataExplorer",
        "databaseName": "SampleLogs"
      },
      {
        "id": "011bb8c9-cf7e-4703-b859-6e6669f07825",
        "clusterUri": "https://help.kusto.windows.net/",
        "type": "AzureDataExplorer",
        "databaseName": "SampleMetrics"
      },
      {
        "id": "43801273-3dd5-435d-9925-fc006d86e087",
        "clusterUri": "https://help.kusto.windows.net/",
        "type": "AzureDataExplorer",
        "databaseName": "Samples"
      },
      {
        "id": "2e21b1aa-d1ef-414f-8d86-5097c0c00eb3",
        "clusterUri": "https://help.kusto.windows.net/",
        "type": "AzureDataExplorer",
        "databaseName": "SecurityLogs"
      },
      {
        "id": "4dc18d85-6aed-401c-8a83-d5ce4028e794",
        "clusterUri": "https://help.kusto.windows.net/",
        "type": "AzureDataExplorer",
        "databaseName": "Trender"
      }
    ],
    "tabs": [
      {
        "id": "1f8a3869-4d85-44f1-b0e5-ec6318be37ff",
        "content": "demo_make_series1 | take 10\n\nlet min_t = toscalar(demo_make_series1 | summarize min(TimeStamp));\nlet max_t = toscalar(demo_make_series1 | summarize max(TimeStamp));\ndemo_make_series1\n| make-series num=count() default=0 on TimeStamp from min_t to max_t step 1h by OsVer\n| render timechart\n\n\nlet min_t = toscalar(demo_make_series1 | summarize min(TimeStamp));\nlet max_t = toscalar(demo_make_series1 | summarize max(TimeStamp));\ndemo_make_series1\n| make-series num=count() default=0 on TimeStamp from min_t to max_t step 1h by OsVer\n| extend ma_num=series_fir(num, repeat(1, 5), true, true)\n| render timechart\n\n\ndemo_series2\n| extend series_fit_2lines(y), series_fit_line(y)\n| render linechart with(xcolumn=x)\n\n\ndemo_series3\n| render timechart\n\ndemo_series3\n| project (periods, scores) = series_periods_detect(num, 0., 14d/2h, 2) //to detect the periods in the time series\n| mv-expand periods, scores\n| extend days=2h*todouble(periods)/1d\n\n\nlet min_t = toscalar(demo_make_series1 | summarize min(TimeStamp));\nlet max_t = toscalar(demo_make_series1 | summarize max(TimeStamp));\ndemo_make_series1\n| make-series num=count() default=0 on TimeStamp from min_t to max_t step 1h by OsVer\n| extend ma_num=series_fir(num, repeat(1, 5), true, true)\n| extend residual_num=series_subtract(num, ma_num) //to calculate residual time series\n| where OsVer == \"Windows 10\"   // filter on Win 10 to visualize a cleaner chart \n| render timechart\n\n\n\ndemo_many_series1\n| take 4\n\n\ndemo_many_series1\n| summarize num=count(), min_t=min(TIMESTAMP), max_t=max(TIMESTAMP)\n\n\nlet min_t = toscalar(demo_many_series1 | summarize min(TIMESTAMP));  \nlet max_t = toscalar(demo_many_series1 | summarize max(TIMESTAMP));  \ndemo_many_series1\n| make-series reads=avg(DataRead) on TIMESTAMP from min_t to max_t step 1h\n| render timechart with(ymin=0)\n\n\ndemo_many_series1\n| summarize by Loc, Op, DB\n| count\n\n\nlet min_t = toscalar(demo_many_series1 | summarize min(TIMESTAMP));  \nlet max_t = toscalar(demo_many_series1 | summarize max(TIMESTAMP));  \ndemo_many_series1\n| make-series reads=avg(DataRead) on TIMESTAMP from min_t to max_t step 1h by Loc, Op, DB\n| extend (rsquare, slope) = series_fit_line(reads)\n| top 2 by slope asc \n| render timechart with(title='Service Traffic Outage for 2 instances (out of 18339)')\n\n\n\nlet min_t = toscalar(demo_many_series1 | summarize min(TIMESTAMP));  \nlet max_t = toscalar(demo_many_series1 | summarize max(TIMESTAMP));  \ndemo_many_series1\n| make-series reads=avg(DataRead) on TIMESTAMP from min_t to max_t step 1h by Loc, Op, DB\n| extend (rsquare, slope) = series_fit_line(reads)\n| top 2 by slope asc\n| project Loc, Op, DB, slope\n\n\n\n\nlet min_t = datetime(2017-01-05);\nlet max_t = datetime(2017-02-03 22:00);\nlet dt = 2h;\ndemo_make_series2\n| make-series num=avg(num) on TimeStamp from min_t to max_t step dt by sid \n| where sid == 'TS1'   //  select a single time series for a cleaner visualization\n| extend (baseline, seasonal, trend, residual) = series_decompose(num, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)\n| render timechart with(title='Web app. traffic of a month, decomposition', ysplit=panels)\n\n\n\n\nlet min_t = datetime(2017-01-05);\nlet max_t = datetime(2017-02-03 22:00);\nlet dt = 2h;\ndemo_make_series2\n| make-series num=avg(num) on TimeStamp from min_t to max_t step dt by sid \n| where sid == 'TS1'   //  select a single time series for a cleaner visualization\n| extend (anomalies, score, baseline) = series_decompose_anomalies(num, 1.5, -1, 'linefit')\n| render anomalychart with(anomalycolumns=anomalies, title='Web app. traffic of a month, anomalies') //use \"| render anomalychart with anomalycolumns=anomalies\" to render the anomalies as bold points on the series charts.\n\n\n\nlet min_t = datetime(2017-01-05);\nlet max_t = datetime(2017-02-03 22:00);\nlet dt = 2h;\nlet horizon=7d;\ndemo_make_series2\n| make-series num=avg(num) on TimeStamp from min_t to max_t+horizon step dt by sid \n| where sid == 'TS1'   //  select a single time series for a cleaner visualization\n| extend forecast = series_decompose_forecast(num, toint(horizon/dt))\n| render timechart with(title='Web app. traffic of a month, forecasting the next week by Time Series Decomposition')\n\n\n\nlet min_t = datetime(2017-01-05);\nlet max_t = datetime(2017-02-03 22:00);\nlet dt = 2h;\nlet horizon=7d;\ndemo_make_series2\n| make-series num=avg(num) on TimeStamp from min_t to max_t+horizon step dt by sid\n| extend offset=case(sid=='TS3', 4000000, sid=='TS2', 2000000, 0)   //  add artificial offset for easy visualization of multiple time series\n| extend num=series_add(num, offset)\n| extend forecast = series_decompose_forecast(num, toint(horizon/dt))\n| render timechart with(title='Web app. traffic of a month, forecasting the next week for 3 time series')\n\n\n\nlet min_t = toscalar(demo_clustering1 | summarize min(PreciseTimeStamp));  \nlet max_t = toscalar(demo_clustering1 | summarize max(PreciseTimeStamp));  \ndemo_clustering1\n| make-series num=count() on PreciseTimeStamp from min_t to max_t step 10m\n| render timechart with(title=\"Service exceptions over a week, 10 minutes resolution\")\n\nlet min_t=datetime(2016-08-23 11:00);\ndemo_clustering1\n| make-series num=count() on PreciseTimeStamp from min_t to min_t+8h step 1m\n| render timechart with(title=\"Zoom on the 2nd spike, 1 minute resolution\")\n\n\nlet min_peak_t=datetime(2016-08-23 15:00);\nlet max_peak_t=datetime(2016-08-23 15:02);\ndemo_clustering1\n| where PreciseTimeStamp between(min_peak_t..max_peak_t)\n| count\n\n\nlet min_peak_t=datetime(2016-08-23 15:00);\nlet max_peak_t=datetime(2016-08-23 15:02);\ndemo_clustering1\n| where PreciseTimeStamp between(min_peak_t..max_peak_t)\n| take 20\n\n\n\nlet min_t = toscalar(demo_clustering1 | summarize min(PreciseTimeStamp));  \nlet max_t = toscalar(demo_clustering1 | summarize max(PreciseTimeStamp));  \ndemo_clustering1\n| extend seg = iff(Region == \"eau\" and ScaleUnit == \"su7\" and DeploymentId == \"b5d1d4df547d4a04ac15885617edba57\"\nand ServiceHost == \"e7f60c5d-4944-42b3-922a-92e98a8e7dec\", \"Problem\", \"Normal\")\n| make-series num=count() on PreciseTimeStamp from min_t to max_t step 10m by seg\n| render timechart\n\n",
        "title": "",
        "dataSourceId": "43801273-3dd5-435d-9925-fc006d86e087"
      }
    ]
  }
}